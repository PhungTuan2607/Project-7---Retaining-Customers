import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


users = pd.read_excel('WA_Fn-UseC_-Telco-Customer-Churn.xlsx', sheet_name='WA_Fn-UseC_-Telco-Customer-Chur')
users.shape
users.head(10)

users['Churn'] = users['Churn'].apply(lambda x: 1 if x == 'Yes' else 0)
users['Churn'].mean()

users['TotalCharges'] = users['TotalCharges'].replace(' ', np.nan).astype(float)
users.shape
users.dropna().shape
users = users.dropna()

users[['tenure', 'MonthlyCharges', 'TotalCharges']].describe()
users['MonthlyCharges'] = np.log(users['MonthlyCharges'])
users['MonthlyCharges'] = (users['MonthlyCharges'] - users['MonthlyCharges'].mean())/users['MonthlyCharges'].std()
users['TotalCharges'] = np.log(users['TotalCharges'])
users['TotalCharges'] = (users['TotalCharges'] - users['TotalCharges'].mean())/users['TotalCharges'].std()
users['tenure'] = (users['tenure'] - users['tenure'].mean())/users['tenure'].std()
users[['tenure', 'MonthlyCharges', 'TotalCharges']].describe()
continuous_vars = list(users.describe().columns)
continuous_vars

for col in list(users.columns):
    print(col, users[col].nunique())
users.groupby('gender').count()['customerID'].plot(
    kind='bar', color='skyblue', grid=True, figsize=(8,6), title='Gender'
)
plt.show()

users.groupby('InternetService').count()['customerID'].plot(
    kind='bar', color='skyblue', grid=True, figsize=(8,6), title='Internet Service'
)
plt.show()

users.groupby('PaymentMethod').count()['customerID'].plot(
    kind='bar', color='skyblue', grid=True, figsize=(8,6), title='Payment Method'
)
plt.show()
dummy_cols = []

sample_set = users[['tenure', 'MonthlyCharges', 'TotalCharges', 'Churn']].copy(deep=True)

for col in list(users.columns):
    if col not in ['tenure', 'MonthlyCharges', 'TotalCharges', 'Churn'] and users[col].nunique() < 5:
        dummy_vars = pd.get_dummies(users[col])
        dummy_vars.columns = [col+str(x) for x in dummy_vars.columns]        
        sample_set = pd.concat([sample_set, dummy_vars], axis=1)
sample_set.head(10)
sample_set.shape
list(sample_set.columns)

target_var = 'Churn'
features = [x for x in list(sample_set.columns) if x != target_var]

from keras.models import Sequential
from keras.layers import Dense
model = Sequential()
model.add(Dense(16, input_dim=len(features), activation='relu'))
model.add(Dense(8, activation='relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
    sample_set[features], 
    sample_set[target_var], 
    test_size=0.3
)
model.fit(X_train, y_train, epochs=50, batch_size=100)
from sklearn.metrics import accuracy_score, precision_score, recall_score
in_sample_preds = [round(x[0]) for x in model.predict(X_train)]
out_sample_preds = [round(x[0]) for x in model.predict(X_test)]
print('In-Sample Accuracy: %0.4f' % accuracy_score(y_train, in_sample_preds))
print('Out-of-Sample Accuracy: %0.4f' % accuracy_score(y_test, out_sample_preds))

print('\n')

print('In-Sample Precision: %0.4f' % precision_score(y_train, in_sample_preds))
print('Out-of-Sample Precision: %0.4f' % precision_score(y_test, out_sample_preds))

print('\n')

print('In-Sample Recall: %0.4f' % recall_score(y_train, in_sample_preds))
print('Out-of-Sample Recall: %0.4f' % recall_score(y_test, out_sample_preds))
from sklearn.metrics import roc_curve, auc
in_sample_preds = [x[0] for x in model.predict(X_train)]
out_sample_preds = [x[0] for x in model.predict(X_test)]
in_sample_fpr, in_sample_tpr, in_sample_thresholds = roc_curve(y_train, in_sample_preds)
out_sample_fpr, out_sample_tpr, out_sample_thresholds = roc_curve(y_test, out_sample_preds)
in_sample_roc_auc = auc(in_sample_fpr, in_sample_tpr)
out_sample_roc_auc = auc(out_sample_fpr, out_sample_tpr)

print('In-Sample AUC: %0.4f' % in_sample_roc_auc)
print('Out-Sample AUC: %0.4f' % out_sample_roc_auc)
plt.figure(figsize=(10,7))

plt.plot(
    out_sample_fpr, out_sample_tpr, color='darkorange', label='Out-Sample ROC curve (area = %0.4f)' % in_sample_roc_auc
)
plt.plot(
    in_sample_fpr, in_sample_tpr, color='navy', label='In-Sample ROC curve (area = %0.4f)' % out_sample_roc_auc
)
plt.plot([0, 1], [0, 1], color='gray', lw=1, linestyle='--')
plt.grid()
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve')
plt.legend(loc="lower right")

plt.show()